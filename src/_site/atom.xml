<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Braneshop | braneshop.com.au</title>
    <link href="https://braneshop.com.au/atom.xml" rel="self" />
    <link href="https://braneshop.com.au" />
    <id>https://braneshop.com.au/atom.xml</id>
    <author>
        <name>Braneshop Team</name>
        <email>noonsilk+-braneshop@gmail.com</email>
    </author>
    <updated>2019-01-30T00:00:00Z</updated>
    <entry>
    <title>Thanks to Ren Imagery for our new logo!</title>
    <link href="https://braneshop.com.au/posts/2019-01-30-Best-Designer-Ren-Imagery.html" />
    <id>https://braneshop.com.au/posts/2019-01-30-Best-Designer-Ren-Imagery.html</id>
    <published>2019-01-30T00:00:00Z</published>
    <updated>2019-01-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="section">
  <div class="info">
    Posted on January 30, 2019
    
      by Noon van der Silk
    
		| <a title="Blog: Recent posts" href="/blog.html">Back to recent posts</a>
  </div>


  <h4 class="blog-title">Thanks to Ren Imagery for our new logo!</h4>

  <div class="info">
    
  </div>

  <p>We have a new logo! You can see it loud and proud at the top of every page; but here is it again:</p>
<center>
<img style='background: black; padding: 20px;' src="/images/braneshop-blue.png" width="400" />
</center>
<p>I like the logo because conveys “brain-ness” with the wavey lines; perhaps it reminds you of your own brain. It also feels a bit “80s” and “fun” to me; a style that <a href="https://silky.github.io/posts/2019-01-27-Designing-Functional-Cloths-with-Haskell.html">I’m well-known to love</a>, and, of course, it’s amenable to funky bright colours.</p>
<p><a href="https://www.theloop.com.au/renlemon/portfolio/Graphic-Designer/Melbourne">Ren</a> is a well-rounded and wonderful designer, and I don’t just say that because she’s a friend of mine. Here are some of the reasons why:</p>
<ul class="normal">
<li>
<strong>Collaborative</strong>: Ren communicates frequently; asks your opinion, and submits some designs for review and to guide further design.
</li>
<li>
<strong>Diverse options</strong>: Unlike other designs I’ve worked with, each of Ren’s submitted designs was actually quite unique and distinctly different from the others. The differences are not just a slight colour changes, or lower case over upper case; each design has it’s own strong elements, story, and justifcation. I think this is a very important skill for design, that I’ve not seen many people be able to do, and Ren does it amazingly well.
</li>
<li>
<strong>Comprehensive</strong>: Once a final design was sleceted, Ren provides the logo in many formats and colours, and also includes nice feature “elements” (such as the squiggle in the bottom-left of the logo) as seperate files. This allows me to include and use parts of the logo thematically through-out the website.
</li>
<li>
<strong>Consistency</strong>: Ren has done design work for me in the past, and it has been consistently excellent. The previous work was for <a href="http://www.composeconference.org/">Compose Conference</a>, and the resulting logo was designed collaboratively between Ren, Lyndon and Myself, and I have to say that it’s now iconic in the functional-programming community as the “Lambda-Tram”:
<center>
<img src="/images/blog/LambdaTramWeb2017.png" />
</center>
</li>
</ul>
<p>So, if you’re looking for any kind of design work, definitely get in contact with her over at <a href="https://www.theloop.com.au/renlemon/portfolio/Graphic-Designer/Melbourne">Ren Imagery</a> or on <a href="https://www.linkedin.com/in/lauren-harris-22409899/">LinkedIn</a>!</p>
</div>
]]></summary>
</entry>
<entry>
    <title>Braneshop, Silverpond, and the Deep Learning Workshop</title>
    <link href="https://braneshop.com.au/posts/2019-01-20-Braneshop-and-Silverpond.html" />
    <id>https://braneshop.com.au/posts/2019-01-20-Braneshop-and-Silverpond.html</id>
    <published>2019-01-20T00:00:00Z</published>
    <updated>2019-01-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="section">
  <div class="info">
    Posted on January 20, 2019
    
      by Noon van der Silk
    
		| <a title="Blog: Recent posts" href="/blog.html">Back to recent posts</a>
  </div>


  <h4 class="blog-title">Braneshop, Silverpond, and the Deep Learning Workshop</h4>

  <div class="info">
    
  </div>

  <p>For the past 2 and a half years, as part of <a href="https://silverpond.com.au">Silverpond</a> I (and others there) have been successfully delivering the deep learning workshop. It all started way back in September 2016, <a href="http://sordina.github.io/">Lyndon</a> and I posted about it on the <a href="https://www.meetup.com/Machine-Learning-AI-Meetup/events/233901076/">ML/AI Meetup</a>. The Braneshop has now partnered with Silverpond to deliver the workshops, and we are so excited!</p>
<h4 id="the-workshop-has-come-a-long-way">The workshop has come a long way</h4>
<p>The first time we ran it, we had everyone packed into the meeting room at Silverpond, and for four hours we talked through the fundamentals of deep learning. Everytime we have ran it we asked for feedback, and as such, each iteration has been improved, tweaked, and been added to. It has been our aim that the workshop stays current, relevant, and useful. The deep learning workshop has gone from a four-hour “intensive”, to a one day training, to a two-day workshop 9to include a project day), and now, it has evolved into a three-day learn-practice-apply kind of workshop.</p>
<h4 id="we-have-had-an-impact-far-and-wide">We have had an impact far and wide</h4>
<p>In only two years, we have trained almost 150 people. We’ve seen attendance from a wide variety of backgrounds and careers: management, data science, programmers, government, Big-4 consulting, specialised hardware startups, computer gaming, as well as not-for-profits and artists.</p>
<p>These workshops have helped people and organisations acquire the knowledge needed to bring AI into their projects. Having started in 2016, they have made their mark in the burgeoning AI community in Melbourne.</p>
<h4 id="the-future-of-the-workshops-the-braneshop">The future of the workshops: The Braneshop</h4>
<p>We are excited to continue teaching cutting edge technology in a hands-on and intuitive manner, and so, we’ve moved on to running the workshops as an independent company, where we can focus on delivery, pedagogy, content development, and up-skilling under-represented groups. Silverpond is our <a href="https://silverpond.com.au/2019/01/18/partnering-with-braneshop-for-silverponds-workshops/">partner</a> on this journey, and I’m personally grateful for their support (in particular Jono and Lyndon) and am looking forward to the future!</p>
<p>#TBT A few of the photos from the workshops over the years below (see more on the <a href="/deep-learning-workshop.html">deep learning workshop page</a>):</p>
<div id="photos-list">
<a href="/images/workshop/ws6.jpg"><img
src="/images/workshop/ws6.jpg" /></a> <a href="/images/workshop/ws2.jpg"><a
href="/images/workshop/ws9.jpg"><img src="/images/workshop/ws9.jpg" /></a> <a href="/images/workshop/ws2.jpg"><img src="/images/workshop/ws2.jpg"
/></a>
</div>
<h4 id="here-are-a-few-ways-you-can-get-involved">Here are a few ways you can get involved</h4>
<ul class="normal">
<li>
Does your organisation need an injection of Deep Learning? <a href="/contact.html">Get in touch</a>!
</li>
<li>
Do you want to upskill — learn the foundations of Deep Learning, get comfortable with TensorFlow, and learn how to train and deploy your models? Come to the <a href="/deep-learning-workshop.html">workshop</a> (25th, 26th and 27th of Feb, 2019!
</li>
<li>
Do you have a specific set of topics or an idea — in AI and it’s implementation — that you think we could teach at your organisation? <a href="/contact.html">Get in touch</a>! (We also have an “AI for Leadership” workshop in the making; let us know if that’s of interest!)
</li>
<li>
You are just generally interested in what we are doing and you want to know more? Join the newsletter, below!
</li>
</ul>
</div>
]]></summary>
</entry>
<entry>
    <title>How much data do you need to retrain a classifier?</title>
    <link href="https://braneshop.com.au/posts/2018-12-17-How-Much-Data-For-Retraining.html" />
    <id>https://braneshop.com.au/posts/2018-12-17-How-Much-Data-For-Retraining.html</id>
    <published>2018-12-17T00:00:00Z</published>
    <updated>2018-12-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="section">
  <div class="info">
    Posted on December 17, 2018
    
      by Noon van der Silk
    
		| <a title="Blog: Recent posts" href="/blog.html">Back to recent posts</a>
  </div>


  <h4 class="blog-title">How much data do you need to retrain a classifier?</h4>

  <div class="info">
    
			<center><p> The code used for this blog-post is <a href="https://github.com/BraneShop/how-much-data-experiments">here</a>. </p></center>
    
  </div>

  <script src="https://cdn.jsdelivr.net/npm/vega@4.3.0"></script>
<script src="https://cdn.jsdelivr.net/npm/vega-lite@3.0.0-rc10"></script>
<script src="https://cdn.jsdelivr.net/npm/vega-embed@3.24.1"></script>
<p>A while ago, Gala had a great idea for a little animation: Give people an idea of how much data they need to train a machine learning model, by showing an animation of a model trained on, say, 5, 50, 500, 5,000, 50,000, 500,000 data points. The way I pictured it in my mind was that as you proceed to more and more data, the number of successful classifications gets larger; ultimately tapering off as we get to larger numbers. In my mind I saw it as the standard S-curve:</p>
<center>
<p>
<img src="/images/blog/s-curve.png" />
</p>
</center>
<div class="important">
<p><b>Quiz</b>: Before reading the rest of this article, have a go at this quick quiz.</p>
<p>With the network and data-set we’re going to be focused on (<a href="https://www.tensorflow.org/hub/tutorials/image_retraining">the TensorFlow transfer learning example using InceptionV3</a>), the expected validation accuracy is 90-95%, when run on the full data set (~700 images per class).</p>
<p>Note that this is using five kinds of flowers as the classes: tulip, rose, daisy, dandelion, sunflower.</p>
<p>Suppose we set aside 70 images per class for validation, in each of the following scenarios:</p>
<ul class="normal">
<li>
Q1: If we use 50% of the remaining images, what would you expect the validation accuracy to be?
</li>
<li>
Q2: If we only use 5% of the remaining images?
</li>
<li>
Q3: If we only use <b>3 images in total</b> per class?
</li>
<li>
Q4: What about only <b>1 image</b> per class!?
</li>
</ul>
</div>
<h4 id="background-on-transfer-learning">Background on Transfer Learning</h4>
<p>For this article, we’re focusing on using a pre-trained network and specialising it to our specific (classification) task. This idea is called “Transfer Learnining”.</p>
<p>Here’s a picture that describes the idea:</p>
<center>
<img src="/images/blog/transfer-learning.png" />
</center>
<p>There’s two steps:</p>
<p>First, you take some “pre-trained” network that is good at a particular task. That’s “1)” in the picture above; some network that is good a recognising trees, houses, and people. It’s been trained for this task and is really good at it.</p>
<p>Secondly, you cut off the final layer, and plug in your new classes that you want to predict. This gives you new parameters to learn (the edges coloured in magenta above). Then, you train your new network on your new data.</p>
<p>The point is, this network should have a lot of “juice” (i.e. learned recognition capability) in the earlier layers, that capture general-purpose structure; and the later layers, that you leave as learnable paremeters, allow the network to specialise to your task.</p>
<p>This is a really powerful idea in deep learning, and, in essence, is incredibly heavily used (from the idea of pre-trained word vectors, to pre-trained image classification networks, as we’re using here).</p>
<h4 id="lets-dive-in">Let’s dive in</h4>
<p>Here’s the plan:</p>
<ol style="list-style-type: decimal">
<li>Follow the TensorFlow Transfer Learning Tutorial, but</li>
<li>Create a “hold-out” dataset from the original dataset, say 10%,</li>
<li>Create downsampled datasets, from the new dataset, of the following: 100%, 90%, 80%, 70%, 60%, 50%, 40%, 30%, 20%, 10%, 5%, as well as the 3-image and 1-image sets. Visually:</li>
</ol>
<center>
<img src="/images/blog/how-much-data-selection.png" />
</center>
<ol start="4" style="list-style-type: decimal">
<li>Throw in some data augmentation, using <a href="https://github.com/aleju/imgaug">imgaug</a>,</li>
<li>Train all these experiments,</li>
<li>See how it all goes!</li>
</ol>
<p>I’ve wrapped this up into a repo so you can reproduce my results: <a href="https://github.com/BraneShop/how-much-data-experiments">braneshop/how-much-data-experiments</a>. Follow the link and check out the README if you want to run it yourself. It takes a few hours to run everything.</p>
<h4 id="results">Results</h4>
<p>Let’s take a look at the train/validation curves for all the training runs. You can click on the circle next to a given experiment name to show only that. Shift-click will show many at once. First, note that in the “just-1” and “just-3” image case, I hacked the normal training code to not worry about having any validation/test data allocation. As a result, we don’t have them in this graph.</p>
<div id="train-val-curves-1">

</div>
<style type="text/css"> div.vega-actions { display: none; } </style>
<script type="text/javascript">
	var spec = { 
		"$schema": "https://vega.github.io/schema/vega-lite/v3.json",
		"data": {"url": "/data/train-val-curves-1.json" },
		"hconcat": [ 
			{ "title": "Train (solid) / Validation (dashed) Curves For Experiments",
				"width": 700, "height": 400,
				"layer":
					[ // Training
						{ "mark": { "type": "line", "interpolate": "basis" },
							"encoding": {
								"x": {"field": "step", "type": "quantitative", "axis": {"title": "Step"}},
								"y": {"field": "loss_train", "type": "quantitative", "axis": {"title": "Value"}},
								"color": {"field": "Experiment", "type": "nominal", "legend": null},
								"tooltip": {"field": "loss_train", "type": "nominal"}
							},
							"transform": [{"filter": {"selection": "legend"}}],
						}
						// Validation
						, { "mark": { "type": "line", "interpolate": "basis", "strokeDash": [4,4] },
								"encoding": {
									"x": {"field": "step", "type": "quantitative", "axis": {"title": "Step"}},
									"y": {"field": "loss_val", "type": "quantitative", "axis": {"title": "Value"}},
									"color": {"field": "Experiment", "type": "nominal", "legend": null},
									"tooltip": {"field": "loss_val", "type": "nominal"}
								},
								"transform": [{"filter": {"selection": "legend"}}],
							}]
				},
				// Legend
				{ "mark": { "type": "circle", "size": 200, "cursor": "pointer"},
					"encoding": { 
						"y": {"type": "nominal", "field": "Experiment", "title": "Experiments"}, 
						"color": { 
							"condition": { "type": "nominal", "field": "Experiment", "legend": null, "selection": "legend" }, 
							"value": "lightgray" 
						}
					}, 
					"selection": { 
						"legend": { 
							"type": "multi", 
							"encodings": ["color"], 
							"on": "click", 
							"toggle": "event.shiftKey", 
							"resolve": "global", 
							"empty": "all"
							}
						}
					}
			]
	};

	vegaEmbed("#train-val-curves-1", spec);
</script>
<p>Observations:</p>
<ul class="normal">
<li>
When we have tiny data (the 5% case) the train loss is immediately tiny; and the val loss immediately high. This was my expectation.
</li>
<li>
If we compare, say, the 100-image case and the 100 with 10x augmentation, the augmented version is worth in train and validation. This was surprising to me.
</li>
<li>
There’s not a significant different in the curves between say the 100% case and the 50% case. This, again, was surprising to me.
</li>
<li>
Augmentation always made both curves worse. I wasn’t expecting this, and am not yet cetrain why it’s the case. I have two main ideas: I used a very elaborate augmentation (the complicated one from the readme on the <a href="https://github.com/aleju/imgaug">imgaug</a> repo), maybe that was a mistake. I think ultimately, the augmented images don’t look much like the testing images, so they encouraged they network to do worse.
</li>
</ul>
<p>The real proof is in the accuracy against the holdout set, though, so let’s see how the models performed in this case. The following graph is the result of running all the models on the holdout images, and taking <strong>the maximum predicted value</strong> of all the resulting class predictions.</p>
<div id="holdout-accuracy">

</div>
<script type="text/javascript">
	var spec 
		= { "$schema": "https://vega.github.io/schema/vega-lite/v3.json", "width": 700, "height": 400,
			  "mark": { "type": "bar", "interpolate": "basis" }, 
				"data": {"url": "/data/holdout-accuracies.json" },
				"encoding": { 
					"y": {"field": "Experiment", 
								"type": "nominal", 
								"sort": {"field": "Accuracy", "op": "average", "order": "ascending"}
							 },
				 "x": {"field": "Accuracy", 
							 "type": "quantitative", 
							 "axis": { "grid": true }, 
							 "scale": { "domain": [0,1] } 
							},
				 "tooltip": {"field": "Accuracy", "type": "quantitative"}
				 }
	};

	vegaEmbed("#holdout-accuracy", spec);
</script>
<p>There were <em>many</em> surprising things about this graph for me. Notably, it doesn’t look like the graph that I predicted at the start (note that the axes are flipped), but probably <em>the</em> most shocking thing for me is this:</p>
<p><strong>With just a single image per class</strong>, we get 68% accuracy on the holdout set! And with just 3 images, we get 75%! Recall that the holdout set consists of ~70 images per class.</p>
<p>Now, when I ran this initially, I hand-picked the 1-image and 3-images per class. I picked ones that looked pretty good, but I was still amazed at the results! I set up a notebook to run a few different examples of that, and I also evaluated the accuracy with the threshold approach, instead of the argmax; here are a few runs:</p>
<pre><code>seed = 1                    seed = 2                    seed = 3

1 image                     1 image                     1 image
              max: 0.5                    max: 0.53                   max: 0.55
  threshold (0.5): 0.3        threshold (0.5): 0.38       threshold (0.5): 0.39
  threshold (0.8): 0.13       threshold (0.8): 0.18       threshold (0.8): 0.15

3 images                    3 images                    3 images
              max: 0.68                   max: 0.66                   max: 0.67
  threshold (0.5): 0.55       threshold (0.5): 0.51       threshold (0.5): 0.54
  threshold (0.8): 0.23       threshold (0.8): 0.25       threshold (0.8): 0.23</code></pre>
<p>You can see that for randomly-picked images, the argmax sits aroud 53% for 1 image, and 67% for three images.</p>
<p>The point is, to me it’s quite amazing to see that picking the argmax, instead of using the threshold, gives such a radical improvement <em>on withheld data</em>.</p>
<p>I’ve made a <a href="https://colab.research.google.com/drive/1VWxeyhOGMTHHVZFe33s5zaHIKXdDUkA2">notebook on Google Colaboratory</a>, so if you have a Google account, you can run the experiments for yourself (you’ll have to save it as a new copy).</p>
<h4 id="discussion">Discussion</h4>
<p>For me, this was quite surprising. For one, I didn’t see the improvement at the middle-range of data that I was expecting (50% training data wasn’t much better than 100%, excluding the holdout set). But moreso, just how much juice can be squeezed out of this particular network + a handful of images is amazing.</p>
<p>The main thing this highlights to me is the power of <a href="https://en.wikipedia.org/wiki/Semi-supervised_learning">semi-supervised learning</a>, <a href="https://en.wikipedia.org/wiki/Active_learning_(machine_learning)">active learning</a>, and <a href="https://en.wikipedia.org/wiki/One-shot_learning">One-shot learning</a>.</p>
<p>Specifically, it suggests to me that the best thing to do is to set up a learning+data acquisition process that makes predictions as fast as possible, and constantly learns as it goes:</p>
<center>
<img src="/images/blog/proposed-workflow.png" />
</center>
<p>This kind of scheme is what my friends over at <a href="http://silverpond.com.au">Silverpond</a> are working on with their <a href="https://highlighter.ai/">Highlighter</a> tool.</p>
<p>Overall, the idea of incorporating data into a model as-it-infers isn’t new, but to me, again, what is surprising is just how little data you need to get started; at least in this specific case!</p>
<p>To reiterate differently: If you’re a business wondering how to adopt AI, one plan would be to build this kind of human-in-the-loop system, where any prediction that is, say, better than 50% chance of being right will be useful to humans. Then, have the humans feed this system as they use it, and it will radically improve with just a small number of confirmed answers!</p>
<p>So, to answer the question from the title, we might say “less than you think!”, if you have the right setup to incorporate new data into your system, as you go.</p>
<h4 id="open-questions">Open questions</h4>
<ul class="normal">
<li>
How do other models go in this measure? Say, segmentation models or bounding box models? Or NLP?
</li>
<li>
Is it really right to think of the softmax layer as <em>probabilities</em>? Certainly it satisfies a probability-distribution constraint, but training seems to simply push these values more apart? i.e. we don’t really care if they are probabilities, if we’re just going to pick the largest. Further, maybe we should only ever think of the probability as the combination of the decision rule (say argmax or &gt; 80%) <em>and</em> the holdout dataset that we evaluate that rule on.
</li>
<li>
Why did augmentation make things worse? Did I over-do it? Related paper: <a href="https://scirate.com/arxiv/1811.04768">Learning data augmentation policies using augmented random search</a>.
</li>
<li>
Could be build some kind of “dataset juicer” that tells us just how much juice we’ll get, for given increases in our labelled data, with respect to certain models and targets?
</li>
<li>
Relatedly, it would be nice to calculate some kind of “potential-juice” measure where we look at the number of variables we’re going to retrain; the number of free variables in our data, and then consider what kind of space of we’ll explore in this domain.
</li>
</ul>
<h4 id="related-papers">Related papers</h4>
<ul class="normal">
<li>
<a href="https://scirate.com/arxiv/1712.00409">Deep Learning Scaling is Predictable, Empirically</a> - This is a deeper investigation into these ideas, across a few different model types. It empirically answers my first open question.
</li>
<li>
<a href="https://scirate.com/arxiv/1811.04768">Learning data augmentation policies using augmented random search</a>.
</li>
</ul>
<h4 id="quiz-answers">Quiz answers</h4>
<div class="important">
<p>Using the maximum value of the class estimates (argmax):</p>
<ul class="normal">
<li>
Q1: If we use 50% of the remaining images, what would you expect the validation accuracy to be? Answer: ~91%
</li>
<li>
Q2: If we only use 5% of the remaining images? Answer: ~83%
</li>
<li>
Q3: If we only use <b>3 images in total</b> per class? Answer: ~67%
</li>
<li>
Q4: What about only <b>1 image</b> per class!? Answer: ~53%
</li>
</ul>
</div>
<h4 id="the-animation">The animation</h4>
<p>Here’s my attempt at the animation (click to view):</p>
<center>
<a href="https://imgur.com/a/swZ9qiQ"><img src="/images/blog/aug-00.jpg" /></a>
</center>
<p>The images with the red text above them are the ones where the inferences were wrong. Unfortunately (or fortunately!) it’s not very compelling, because all the accuracies are basically very high!</p>
</div>
]]></summary>
</entry>

</feed>
